// source: transaction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var wallet_pb = require('./wallet_pb.js');
goog.object.extend(proto, wallet_pb);
goog.exportSymbol('proto.transaction.GetTransactionsRequest', null, global);
goog.exportSymbol('proto.transaction.GetTransactionsResponse', null, global);
goog.exportSymbol('proto.transaction.TopUpWalletRequest', null, global);
goog.exportSymbol('proto.transaction.Transaction', null, global);
goog.exportSymbol('proto.transaction.TransactionQueryCriteria', null, global);
goog.exportSymbol('proto.transaction.TransferMoneyRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transaction.TransactionQueryCriteria = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transaction.TransactionQueryCriteria, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transaction.TransactionQueryCriteria.displayName = 'proto.transaction.TransactionQueryCriteria';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transaction.TransferMoneyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transaction.TransferMoneyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transaction.TransferMoneyRequest.displayName = 'proto.transaction.TransferMoneyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transaction.TopUpWalletRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transaction.TopUpWalletRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transaction.TopUpWalletRequest.displayName = 'proto.transaction.TopUpWalletRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transaction.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transaction.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transaction.Transaction.displayName = 'proto.transaction.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transaction.GetTransactionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transaction.GetTransactionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transaction.GetTransactionsRequest.displayName = 'proto.transaction.GetTransactionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transaction.GetTransactionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.transaction.GetTransactionsResponse.repeatedFields_, null);
};
goog.inherits(proto.transaction.GetTransactionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transaction.GetTransactionsResponse.displayName = 'proto.transaction.GetTransactionsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transaction.TransactionQueryCriteria.prototype.toObject = function(opt_includeInstance) {
  return proto.transaction.TransactionQueryCriteria.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transaction.TransactionQueryCriteria} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.TransactionQueryCriteria.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    vendoraddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transactionuuid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transaction.TransactionQueryCriteria}
 */
proto.transaction.TransactionQueryCriteria.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transaction.TransactionQueryCriteria;
  return proto.transaction.TransactionQueryCriteria.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transaction.TransactionQueryCriteria} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transaction.TransactionQueryCriteria}
 */
proto.transaction.TransactionQueryCriteria.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVendoraddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionuuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transaction.TransactionQueryCriteria.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transaction.TransactionQueryCriteria.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transaction.TransactionQueryCriteria} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.TransactionQueryCriteria.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getVendoraddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransactionuuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.transaction.TransactionQueryCriteria.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.transaction.TransactionQueryCriteria} returns this
 */
proto.transaction.TransactionQueryCriteria.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string VendorAddress = 2;
 * @return {string}
 */
proto.transaction.TransactionQueryCriteria.prototype.getVendoraddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.TransactionQueryCriteria} returns this
 */
proto.transaction.TransactionQueryCriteria.prototype.setVendoraddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string TransactionUUID = 3;
 * @return {string}
 */
proto.transaction.TransactionQueryCriteria.prototype.getTransactionuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.TransactionQueryCriteria} returns this
 */
proto.transaction.TransactionQueryCriteria.prototype.setTransactionuuid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transaction.TransferMoneyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.transaction.TransferMoneyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transaction.TransferMoneyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.TransferMoneyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    apikey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sourceownerid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sourceownertable: jspb.Message.getFieldWithDefault(msg, 3, ""),
    destinationownerid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    destinationownertable: jspb.Message.getFieldWithDefault(msg, 5, ""),
    idwalletupdateaction: jspb.Message.getFieldWithDefault(msg, 6, 0),
    ammount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    description: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transaction.TransferMoneyRequest}
 */
proto.transaction.TransferMoneyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transaction.TransferMoneyRequest;
  return proto.transaction.TransferMoneyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transaction.TransferMoneyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transaction.TransferMoneyRequest}
 */
proto.transaction.TransferMoneyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSourceownerid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceownertable(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDestinationownerid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationownertable(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIdwalletupdateaction(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmmount(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transaction.TransferMoneyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transaction.TransferMoneyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transaction.TransferMoneyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.TransferMoneyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApikey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSourceownerid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSourceownertable();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDestinationownerid();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getDestinationownertable();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIdwalletupdateaction();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getAmmount();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string apiKey = 1;
 * @return {string}
 */
proto.transaction.TransferMoneyRequest.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.TransferMoneyRequest} returns this
 */
proto.transaction.TransferMoneyRequest.prototype.setApikey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 SourceOwnerID = 2;
 * @return {number}
 */
proto.transaction.TransferMoneyRequest.prototype.getSourceownerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.transaction.TransferMoneyRequest} returns this
 */
proto.transaction.TransferMoneyRequest.prototype.setSourceownerid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string SourceOwnerTable = 3;
 * @return {string}
 */
proto.transaction.TransferMoneyRequest.prototype.getSourceownertable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.TransferMoneyRequest} returns this
 */
proto.transaction.TransferMoneyRequest.prototype.setSourceownertable = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 DestinationOwnerID = 4;
 * @return {number}
 */
proto.transaction.TransferMoneyRequest.prototype.getDestinationownerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.transaction.TransferMoneyRequest} returns this
 */
proto.transaction.TransferMoneyRequest.prototype.setDestinationownerid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string DestinationOwnerTable = 5;
 * @return {string}
 */
proto.transaction.TransferMoneyRequest.prototype.getDestinationownertable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.TransferMoneyRequest} returns this
 */
proto.transaction.TransferMoneyRequest.prototype.setDestinationownertable = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 IDWalletUpdateAction = 6;
 * @return {number}
 */
proto.transaction.TransferMoneyRequest.prototype.getIdwalletupdateaction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.transaction.TransferMoneyRequest} returns this
 */
proto.transaction.TransferMoneyRequest.prototype.setIdwalletupdateaction = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 Ammount = 7;
 * @return {number}
 */
proto.transaction.TransferMoneyRequest.prototype.getAmmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.transaction.TransferMoneyRequest} returns this
 */
proto.transaction.TransferMoneyRequest.prototype.setAmmount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string Description = 8;
 * @return {string}
 */
proto.transaction.TransferMoneyRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.TransferMoneyRequest} returns this
 */
proto.transaction.TransferMoneyRequest.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transaction.TopUpWalletRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.transaction.TopUpWalletRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transaction.TopUpWalletRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.TopUpWalletRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    apikey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ownerid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ownertable: jspb.Message.getFieldWithDefault(msg, 3, ""),
    idwalletupdateaction: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ammount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    description: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transaction.TopUpWalletRequest}
 */
proto.transaction.TopUpWalletRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transaction.TopUpWalletRequest;
  return proto.transaction.TopUpWalletRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transaction.TopUpWalletRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transaction.TopUpWalletRequest}
 */
proto.transaction.TopUpWalletRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOwnerid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnertable(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIdwalletupdateaction(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmmount(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transaction.TopUpWalletRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transaction.TopUpWalletRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transaction.TopUpWalletRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.TopUpWalletRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApikey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOwnerid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getOwnertable();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIdwalletupdateaction();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getAmmount();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string apiKey = 1;
 * @return {string}
 */
proto.transaction.TopUpWalletRequest.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.TopUpWalletRequest} returns this
 */
proto.transaction.TopUpWalletRequest.prototype.setApikey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 OwnerID = 2;
 * @return {number}
 */
proto.transaction.TopUpWalletRequest.prototype.getOwnerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.transaction.TopUpWalletRequest} returns this
 */
proto.transaction.TopUpWalletRequest.prototype.setOwnerid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string OwnerTable = 3;
 * @return {string}
 */
proto.transaction.TopUpWalletRequest.prototype.getOwnertable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.TopUpWalletRequest} returns this
 */
proto.transaction.TopUpWalletRequest.prototype.setOwnertable = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 IDWalletUpdateAction = 4;
 * @return {number}
 */
proto.transaction.TopUpWalletRequest.prototype.getIdwalletupdateaction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.transaction.TopUpWalletRequest} returns this
 */
proto.transaction.TopUpWalletRequest.prototype.setIdwalletupdateaction = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 Ammount = 5;
 * @return {number}
 */
proto.transaction.TopUpWalletRequest.prototype.getAmmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.transaction.TopUpWalletRequest} returns this
 */
proto.transaction.TopUpWalletRequest.prototype.setAmmount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string Description = 6;
 * @return {string}
 */
proto.transaction.TopUpWalletRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.TopUpWalletRequest} returns this
 */
proto.transaction.TopUpWalletRequest.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transaction.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.transaction.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transaction.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionuuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    transferdetails: (f = msg.getTransferdetails()) && proto.transaction.TransferMoneyRequest.toObject(includeInstance, f),
    topupdetails: (f = msg.getTopupdetails()) && proto.transaction.TopUpWalletRequest.toObject(includeInstance, f),
    idwalletupdateaction: jspb.Message.getFieldWithDefault(msg, 4, 0),
    walletupdateaction: jspb.Message.getFieldWithDefault(msg, 5, ""),
    idwalletlogstatus: jspb.Message.getFieldWithDefault(msg, 6, 0),
    walletlogstatus: jspb.Message.getFieldWithDefault(msg, 7, ""),
    ammount: jspb.Message.getFieldWithDefault(msg, 8, 0),
    description: jspb.Message.getFieldWithDefault(msg, 9, ""),
    createdat: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transaction.Transaction}
 */
proto.transaction.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transaction.Transaction;
  return proto.transaction.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transaction.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transaction.Transaction}
 */
proto.transaction.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionuuid(value);
      break;
    case 2:
      var value = new proto.transaction.TransferMoneyRequest;
      reader.readMessage(value,proto.transaction.TransferMoneyRequest.deserializeBinaryFromReader);
      msg.setTransferdetails(value);
      break;
    case 3:
      var value = new proto.transaction.TopUpWalletRequest;
      reader.readMessage(value,proto.transaction.TopUpWalletRequest.deserializeBinaryFromReader);
      msg.setTopupdetails(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIdwalletupdateaction(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWalletupdateaction(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIdwalletlogstatus(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setWalletlogstatus(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setAmmount(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transaction.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transaction.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transaction.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionuuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTransferdetails();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.transaction.TransferMoneyRequest.serializeBinaryToWriter
    );
  }
  f = message.getTopupdetails();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.transaction.TopUpWalletRequest.serializeBinaryToWriter
    );
  }
  f = message.getIdwalletupdateaction();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getWalletupdateaction();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIdwalletlogstatus();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getWalletlogstatus();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAmmount();
  if (f !== 0) {
    writer.writeSint64(
      8,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCreatedat();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string TransactionUUID = 1;
 * @return {string}
 */
proto.transaction.Transaction.prototype.getTransactionuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.Transaction} returns this
 */
proto.transaction.Transaction.prototype.setTransactionuuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TransferMoneyRequest TransferDetails = 2;
 * @return {?proto.transaction.TransferMoneyRequest}
 */
proto.transaction.Transaction.prototype.getTransferdetails = function() {
  return /** @type{?proto.transaction.TransferMoneyRequest} */ (
    jspb.Message.getWrapperField(this, proto.transaction.TransferMoneyRequest, 2));
};


/**
 * @param {?proto.transaction.TransferMoneyRequest|undefined} value
 * @return {!proto.transaction.Transaction} returns this
*/
proto.transaction.Transaction.prototype.setTransferdetails = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transaction.Transaction} returns this
 */
proto.transaction.Transaction.prototype.clearTransferdetails = function() {
  return this.setTransferdetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transaction.Transaction.prototype.hasTransferdetails = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TopUpWalletRequest TopUpDetails = 3;
 * @return {?proto.transaction.TopUpWalletRequest}
 */
proto.transaction.Transaction.prototype.getTopupdetails = function() {
  return /** @type{?proto.transaction.TopUpWalletRequest} */ (
    jspb.Message.getWrapperField(this, proto.transaction.TopUpWalletRequest, 3));
};


/**
 * @param {?proto.transaction.TopUpWalletRequest|undefined} value
 * @return {!proto.transaction.Transaction} returns this
*/
proto.transaction.Transaction.prototype.setTopupdetails = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transaction.Transaction} returns this
 */
proto.transaction.Transaction.prototype.clearTopupdetails = function() {
  return this.setTopupdetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transaction.Transaction.prototype.hasTopupdetails = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 IDWalletUpdateAction = 4;
 * @return {number}
 */
proto.transaction.Transaction.prototype.getIdwalletupdateaction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.transaction.Transaction} returns this
 */
proto.transaction.Transaction.prototype.setIdwalletupdateaction = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string WalletUpdateAction = 5;
 * @return {string}
 */
proto.transaction.Transaction.prototype.getWalletupdateaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.Transaction} returns this
 */
proto.transaction.Transaction.prototype.setWalletupdateaction = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 IDWalletLogStatus = 6;
 * @return {number}
 */
proto.transaction.Transaction.prototype.getIdwalletlogstatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.transaction.Transaction} returns this
 */
proto.transaction.Transaction.prototype.setIdwalletlogstatus = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string WalletLogStatus = 7;
 * @return {string}
 */
proto.transaction.Transaction.prototype.getWalletlogstatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.Transaction} returns this
 */
proto.transaction.Transaction.prototype.setWalletlogstatus = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional sint64 Ammount = 8;
 * @return {number}
 */
proto.transaction.Transaction.prototype.getAmmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.transaction.Transaction} returns this
 */
proto.transaction.Transaction.prototype.setAmmount = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string Description = 9;
 * @return {string}
 */
proto.transaction.Transaction.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.Transaction} returns this
 */
proto.transaction.Transaction.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string CreatedAt = 10;
 * @return {string}
 */
proto.transaction.Transaction.prototype.getCreatedat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.Transaction} returns this
 */
proto.transaction.Transaction.prototype.setCreatedat = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transaction.GetTransactionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.transaction.GetTransactionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transaction.GetTransactionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.GetTransactionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    apikey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    querycriteria: (f = msg.getQuerycriteria()) && proto.transaction.TransactionQueryCriteria.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transaction.GetTransactionsRequest}
 */
proto.transaction.GetTransactionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transaction.GetTransactionsRequest;
  return proto.transaction.GetTransactionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transaction.GetTransactionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transaction.GetTransactionsRequest}
 */
proto.transaction.GetTransactionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 2:
      var value = new proto.transaction.TransactionQueryCriteria;
      reader.readMessage(value,proto.transaction.TransactionQueryCriteria.deserializeBinaryFromReader);
      msg.setQuerycriteria(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transaction.GetTransactionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transaction.GetTransactionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transaction.GetTransactionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.GetTransactionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApikey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuerycriteria();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.transaction.TransactionQueryCriteria.serializeBinaryToWriter
    );
  }
};


/**
 * optional string apiKey = 1;
 * @return {string}
 */
proto.transaction.GetTransactionsRequest.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.GetTransactionsRequest} returns this
 */
proto.transaction.GetTransactionsRequest.prototype.setApikey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TransactionQueryCriteria queryCriteria = 2;
 * @return {?proto.transaction.TransactionQueryCriteria}
 */
proto.transaction.GetTransactionsRequest.prototype.getQuerycriteria = function() {
  return /** @type{?proto.transaction.TransactionQueryCriteria} */ (
    jspb.Message.getWrapperField(this, proto.transaction.TransactionQueryCriteria, 2));
};


/**
 * @param {?proto.transaction.TransactionQueryCriteria|undefined} value
 * @return {!proto.transaction.GetTransactionsRequest} returns this
*/
proto.transaction.GetTransactionsRequest.prototype.setQuerycriteria = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transaction.GetTransactionsRequest} returns this
 */
proto.transaction.GetTransactionsRequest.prototype.clearQuerycriteria = function() {
  return this.setQuerycriteria(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transaction.GetTransactionsRequest.prototype.hasQuerycriteria = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transaction.GetTransactionsResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transaction.GetTransactionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.transaction.GetTransactionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transaction.GetTransactionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.GetTransactionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && wallet_pb.RPCResponse.toObject(includeInstance, f),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.transaction.Transaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transaction.GetTransactionsResponse}
 */
proto.transaction.GetTransactionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transaction.GetTransactionsResponse;
  return proto.transaction.GetTransactionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transaction.GetTransactionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transaction.GetTransactionsResponse}
 */
proto.transaction.GetTransactionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new wallet_pb.RPCResponse;
      reader.readMessage(value,wallet_pb.RPCResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 3:
      var value = new proto.transaction.Transaction;
      reader.readMessage(value,proto.transaction.Transaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transaction.GetTransactionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transaction.GetTransactionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transaction.GetTransactionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.GetTransactionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      wallet_pb.RPCResponse.serializeBinaryToWriter
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.transaction.Transaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional wallet.RPCResponse response = 1;
 * @return {?proto.wallet.RPCResponse}
 */
proto.transaction.GetTransactionsResponse.prototype.getResponse = function() {
  return /** @type{?proto.wallet.RPCResponse} */ (
    jspb.Message.getWrapperField(this, wallet_pb.RPCResponse, 1));
};


/**
 * @param {?proto.wallet.RPCResponse|undefined} value
 * @return {!proto.transaction.GetTransactionsResponse} returns this
*/
proto.transaction.GetTransactionsResponse.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transaction.GetTransactionsResponse} returns this
 */
proto.transaction.GetTransactionsResponse.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transaction.GetTransactionsResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Transaction transactions = 3;
 * @return {!Array<!proto.transaction.Transaction>}
 */
proto.transaction.GetTransactionsResponse.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.transaction.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.transaction.Transaction, 3));
};


/**
 * @param {!Array<!proto.transaction.Transaction>} value
 * @return {!proto.transaction.GetTransactionsResponse} returns this
*/
proto.transaction.GetTransactionsResponse.prototype.setTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.transaction.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.transaction.Transaction}
 */
proto.transaction.GetTransactionsResponse.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.transaction.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.transaction.GetTransactionsResponse} returns this
 */
proto.transaction.GetTransactionsResponse.prototype.clearTransactionsList = function() {
  return this.setTransactionsList([]);
};


goog.object.extend(exports, proto.transaction);
